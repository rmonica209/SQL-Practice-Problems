/* stratascratch.com Practice Problems III*/

/* Meta/Facebook has developed a new programing language called Hack.To measure the popularity of Hack they ran a survey with their employees. 
The survey included data on previous programing familiarity as well as the number of years of experience, age, gender and most importantly satisfaction with Hack.
Due to an error location data was not collected, but your supervisor demands a report showing average popularity of Hack by office location. Luckily the user IDs of employees completing the surveys were stored.
Based on the above, find the average popularity of the Hack per office location.
Output the location along with the average popularity. */
/* facebook_employees Table:
id:        int
location:  varchar
age:       int
gender:    varchar
is_senior: bool

facebook_hack_survey Table:
employee_id:  int
age:          int
gender:       varchar
popularity:   int */

SELECT fe.location, AVG(fhs.popularity) 
FROM facebook_employees fe
JOIN facebook_hack_survey fhs
ON fe.id = fhs.employee_id
GROUP BY fe.location;


/* Find the number of reviews received by Lo-Lo's Chicken & Waffles for each star.
Output the number of stars along with the corresponding number of reviews.
Sort records by stars in ascending order. */
/* yelp_reviews Table:
business_name:  varchar
review_id:      varchar
user_id:        varchar
stars:          varchar
review_date:    datetime
review_text:    varchar
funny:          int
useful:         int
cool:           int */

SELECT COUNT(review_id) AS num_of_reviews, stars 
FROM yelp_reviews
WHERE business_name = 'Lo-Lo\'s Chicken & Waffles'
GROUP BY stars
ORDER BY stars ASC;


/* Find the number of 5-star reviews earned by Lo-Lo's Chicken & Waffles. */
/* yelp_reviews Table:
business_name:  varchar
review_id:      varchar
user_id:        varchar
stars:          varchar
review_date:    datetime
review_text:    varchar
funny:          int
useful:         int
cool:           int */

SELECT COUNT(stars) 
FROM yelp_reviews
WHERE business_name = 'Lo-Lo\'s Chicken & Waffles' AND stars = 5;


/* Find the number of entries per star.
Output each number of stars along with the corresponding number of entries.
Order records by stars in ascending order. */
/* yelp_reviews Table:
business_name:  varchar
review_id:      varchar
user_id:        varchar
stars:          varchar
review_date:    datetime
review_text:    varchar
funny:          int
useful:         int
cool:           int */

SELECT stars, COUNT(*) AS number_of_entries
FROM yelp_reviews
GROUP BY stars
ORDER BY stars ASC;


/* Find the average number of stars for each state.
Output the state name along with the corresponding average number of stars. */
/* yelp_business Table:
business_id:   varchar
name:          varchar
neighborhood:  varchar
address:       varchar
city:          varchar
state:         varchar
postal_code:   varchar
latitude:      float
longitude:     float
stars:         float
review_count:  int
is_open:       int
categories:    varchar */

SELECT state, AVG(stars) 
FROM yelp_business
GROUP BY state;


/* Find the number of open businesses. */
/* yelp_business Table:
business_id:   varchar
name:          varchar
neighborhood:  varchar
address:       varchar
city:          varchar
state:         varchar
postal_code:   varchar
latitude:      float
longitude:     float
stars:         float
review_count:  int
is_open:       int
categories:    varchar */

SELECT COUNT(is_open) AS open_businesses
FROM yelp_business
WHERE is_open = 1;


/* Find the review count for one-star businesses from yelp.
Output the name along with the corresponding review count. */
/* yelp_business Table:
business_id:   varchar
name:          varchar
neighborhood:  varchar
address:       varchar
city:          varchar
state:         varchar
postal_code:   varchar
latitude:      float
longitude:     float
stars:         float
review_count:  int
is_open:       int
categories:    varchar */

SELECT name, review_count
FROM yelp_business
WHERE stars = 1
GROUP BY name;


/* Find the top 5 businesses with most reviews. Assume that each row has a unique business_id such that the total reviews for each business is listed 
on each row. Output the business name along with the total number of reviews and order your results by the total reviews in descending order. */
/* yelp_business Table:
business_id:   varchar
name:          varchar
neighborhood:  varchar
address:       varchar
city:          varchar
state:         varchar
postal_code:   varchar
latitude:      float
longitude:     float
stars:         float
review_count:  int
is_open:       int
categories:    varchar */

SELECT name, review_count 
FROM yelp_business
GROUP BY name
ORDER BY review_count DESC
LIMIT 5;


/* Find the number of US-based wineries that have expensive wines.
A wine is considered to be expensive if its price is $200 or more. */
/* winemag_p1 Table:
id:           int
country:      varchar
description:  varchar
designation:  varchar
points:       int
price:        float
province:     varchar
region_1:     varchar
region_2:     varchar
variety:      varchar
winery:       varchar */

SELECT COUNT(DISTINCT winery) AS number_of_wineries
FROM winemag_p1
WHERE country = 'US' AND price >= 200;


/* Find wine varieties tasted by 'Roger Voss' and with a value in the 'region_1' column of the dataset. Output unique variety names only.*/
/* winemag_p1 Table:
id:           int
country:      varchar
description:  varchar
designation:  varchar
points:       int
price:        float
province:     varchar
region_1:     varchar
region_2:     varchar
variety:      varchar
winery:       varchar */

SELECT DISTINCT(variety) 
FROM winemag_p2
WHERE taster_name = 'Roger Voss' and region_1 IS NOT NULL;


/* Find all wine varieties which can be considered cheap based on the price.
A variety is considered cheap if the price of a bottle lies between 5 to 20 USD.
Output unique variety names only. */
/* winemag_p1 Table:
id:           int
country:      varchar
description:  varchar
designation:  varchar
points:       int
price:        float
province:     varchar
region_1:     varchar
region_2:     varchar
variety:      varchar
winery:       varchar */

SELECT DISTINCT(variety)  
FROM winemag_p1
WHERE price BETWEEN 5 AND 20;

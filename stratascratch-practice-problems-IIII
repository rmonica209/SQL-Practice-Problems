/* stratascratch.com Practice Problems*/


/* Find songs that are ranked between 8-10.
Output the track name along with the corresponding position, ordered ascendingly. */
/* spotify_worldwide_daily_song_ranking Table:
id:         int
position:   int
trackname:  varchar
artist:     varchar
streams:    int
url:        varchar
date:       datetime
region:     varchar */

SELECT trackname, position
FROM spotify_worldwide_daily_song_ranking
WHERE position IN (8,9,10)
ORDER BY position;


/*Find the total number of streams for the top 100 ranked songs.*/
/* spotify_worldwide_daily_song_ranking Table:
id:         int
position:   int
trackname:  varchar
artist:     varchar
streams:    int
url:        varchar
date:       datetime
region:     varchar */

SELECT SUM(streams) AS number_of_streams
FROM spotify_worldwide_daily_song_ranking
WHERE position <=100;


/* Find the average number of streams across all songs. */
/* spotify_worldwide_daily_song_ranking Table:
id:         int
position:   int
trackname:  varchar
artist:     varchar
streams:    int
url:        varchar
date:       datetime
region:     varchar */

SELECT AVG(streams) AS average_streams 
FROM spotify_worldwide_daily_song_ranking;

/* Find the top 10 ranked songs by position. Output the track name along with the corresponding position and sort records 
by the position in descending order and track name alphabetically,  as there are many tracks that are tied for the same position.*/
/* spotify_worldwide_daily_song_ranking Table:
id:         int
position:   int
trackname:  varchar
artist:     varchar
streams:    int
url:        varchar
date:       datetime
region:     varchar */

SELECT trackname, position 
FROM spotify_worldwide_daily_song_ranking
WHERE position <= 10
GROUP BY trackname, position
ORDER BY position, trackname DESC;


/* Find songs with less than 2000 streams.
Output the track name along with the corresponding streams.
Sort records by streams in descending order.
There is no need to group rows with same track name */
/* spotify_worldwide_daily_song_ranking Table:
id:         int
position:   int
trackname:  varchar
artist:     varchar
streams:    int
url:        varchar
date:       datetime
region:     varchar */

SELECT trackname, streams
FROM spotify_worldwide_daily_song_ranking
WHERE streams <= 2000
ORDER BY streams DESC;


/* Find how many times each artist appeared on the Spotify ranking list
Output the artist name along with the corresponding number of occurrences.
Order records by the number of occurrences in descending order. */
/* spotify_worldwide_daily_song_ranking Table:
id:         int
position:   int
trackname:  varchar
artist:     varchar
streams:    int
url:        varchar
date:       datetime
region:     varchar */

SELECT artist, COUNT(position) AS number_of_occurrences
FROM spotify_worldwide_daily_song_ranking
GROUP BY artist
ORDER BY number_of_occurrences DESC;


/* Find songs that have more than 3 million streams.
Output the track name, artist, and the corresponding streams.
Sort records based on streams in descending order. */
/* spotify_worldwide_daily_song_ranking Table:
id:         int
position:   int
trackname:  varchar
artist:     varchar
streams:    int
url:        varchar
date:       datetime
region:     varchar */

SELECT trackname, artist, streams 
FROM spotify_worldwide_daily_song_ranking
WHERE streams > 3000000;


/* Get the job titles of the 3 employees who received the most overtime pay
Output the job title of selected records. */
/* sf_public_salaries Table:
id:                int
employeename:      varchar
jobtitle:          varchar
basepay:           float
overtimepay:       float
otherpay:          float
benefits:          float
totalpay:          float
totalpaybenefits:  float
year:              int
notes:             datetime
agency:            varchar
status:            varchar */

SELECT jobtitle 
FROM sf_public_salaries
ORDER BY overtimepay DESC
LIMIT 3;


/* Find all employees with a job title that contains 'METROPOLITAN TRANSIT AUTHORITY' and 
output the employee's name along with the corresponding total pay with benefits. */
/* sf_public_salaries Table:
id:                int
employeename:      varchar
jobtitle:          varchar
basepay:           float
overtimepay:       float
otherpay:          float
benefits:          float
totalpay:          float
totalpaybenefits:  float
year:              int
notes:             datetime
agency:            varchar
status:            varchar */

SELECT employeename, totalpaybenefits 
FROM sf_public_salaries
WHERE jobtitle LIKE '%METROPOLITAN TRANSIT AUTHORITY%';


/* Find benefits that people with the name 'Patrick' have.
Output the full employee name along with the corresponding benefits. */
/* sf_public_salaries Table:
id:                int
employeename:      varchar
jobtitle:          varchar
basepay:           float
overtimepay:       float
otherpay:          float
benefits:          float
totalpay:          float
totalpaybenefits:  float
year:              int
notes:             datetime
agency:            varchar
status:            varchar */

SELECT employeename, benefits 
FROM sf_public_salaries
WHERE employeename LIKE '%Patrick%';


/* Find job titles that had 0 hours of overtime.
Output unique job title names. */
/* sf_public_salaries Table:
id:                int
employeename:      varchar
jobtitle:          varchar
basepay:           float
overtimepay:       float
otherpay:          float
benefits:          float
totalpay:          float
totalpaybenefits:  float
year:              int
notes:             datetime
agency:            varchar
status:            varchar */

SELECT DISTINCT(jobtitle) 
FROM sf_public_salaries
WHERE overtimepay = 0;


/* Find the base pay for Police Captains.
Output the employee name along with the corresponding base pay. */
/* sf_public_salaries Table:
id:                int
employeename:      varchar
jobtitle:          varchar
basepay:           float
overtimepay:       float
otherpay:          float
benefits:          float
totalpay:          float
totalpaybenefits:  float
year:              int
notes:             datetime
agency:            varchar
status:            varchar */

SELECT employeename, basepay 
FROM sf_public_salaries
WHERE jobtitle LIKE '%Police%';


/* Find Olympics games that the youngest and the oldest athletes participated in the history of Olympics.
Output all the details corresponding to each record. */
/* olympics_athletes_events Table:
id:      int
name:    varchar
sex:     varchar
age:     float
height:  float
weight:  datetime
team:    varchar
noc:     varchar
games:   varchar
year:    int
season:  varchar
city:    varchar
sport:   varchar
event:   varchar
medal:   varchar */

SELECT * 
FROM olympics_athletes_events
WHERE age = (SELECT MIN(age) FROM olympics_athletes_events) OR 
age = (SELECT MAX(age) FROM olympics_athletes_events);

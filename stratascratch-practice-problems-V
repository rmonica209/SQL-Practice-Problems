/* stratascratch.com Practice Problems*/


/* Find the number of patrons who renewed books at least once but less than 10 times in April 2015. 
Each row is an unique patron. */
/* library_usage Table:
patron_type_code:              int
patron_type_definition:        varchar
total_checkouts:               int
total_renewals:                int
age_range:                     varchar
home_library_code:             varchar
home_library_definition:       varchar
circulation_active_month:      varchar
circulation_active_year:       float
notice_preference_code:        varchar
notice_preference_definition:  varchar
provided_email_address:        bool
year_patron_registered:        int
outside_of_county:             bool
supervisor_district:           float */

SELECT COUNT(*) AS number_of_patrons
FROM library_usage
WHERE total_renewals < 10 AND total_renewals >= 1
AND circulation_active_month = 'April'
AND circulation_active_year = 2015;


/* Find libraries with the highest number of total renewals.
Output all home library definitions along with the corresponding total renewals.
Order records by total renewals in descending order. */
/* library_usage Table:
patron_type_code:              int
patron_type_definition:        varchar
total_checkouts:               int
total_renewals:                int
age_range:                     varchar
home_library_code:             varchar
home_library_definition:       varchar
circulation_active_month:      varchar
circulation_active_year:       float
notice_preference_code:        varchar
notice_preference_definition:  varchar
provided_email_address:        bool
year_patron_registered:        int
outside_of_county:             bool
supervisor_district:           float */

SELECT home_library_definition, SUM(total_renewals) AS Highest_total_renewals
FROM library_usage
GROUP BY home_library_definition
ORDER BY highest_total_renewals DESC;


/* Find how many people registered in libraries in the year 2016.
Output the total patrons. Keep in mind that each row represents different patron. */
/* library_usage Table:
patron_type_code:              int
patron_type_definition:        varchar
total_checkouts:               int
total_renewals:                int
age_range:                     varchar
home_library_code:             varchar
home_library_definition:       varchar
circulation_active_month:      varchar
circulation_active_year:       float
notice_preference_code:        varchar
notice_preference_definition:  varchar
provided_email_address:        bool
year_patron_registered:        int
outside_of_county:             bool
supervisor_district:           float */

SELECT COUNT(patron_type_definition) 
FROM library_usage
WHERE year_patron_registered = 2016;


/* Find libraries who haven't provided the email address in circulation year 2016 but their notice preference definition is set to email.
Output the library code. */
/* library_usage Table:
patron_type_code:              int
patron_type_definition:        varchar
total_checkouts:               int
total_renewals:                int
age_range:                     varchar
home_library_code:             varchar
home_library_definition:       varchar
circulation_active_month:      varchar
circulation_active_year:       float
notice_preference_code:        varchar
notice_preference_definition:  varchar
provided_email_address:        bool
year_patron_registered:        int
outside_of_county:             bool
supervisor_district:           float */

SELECT DISTINCT home_library_code
FROM library_usage
WHERE notice_preference_definition = 'email' AND circulation_active_year = 2016
AND provided_email_address = FALSE;


/* Find the number of libraries that had 100 or more of total checkouts in February 2015. 
Be aware that there could be more than one row for certain library on monthly basis. */
/* library_usage Table:
patron_type_code:              int
patron_type_definition:        varchar
total_checkouts:               int
total_renewals:                int
age_range:                     varchar
home_library_code:             varchar
home_library_definition:       varchar
circulation_active_month:      varchar
circulation_active_year:       float
notice_preference_code:        varchar
notice_preference_definition:  varchar
provided_email_address:        bool
year_patron_registered:        int
outside_of_county:             bool
supervisor_district:           float */


SELECT COUNT(DISTINCT home_library_code) 
FROM library_usage
WHERE circulation_active_month = 'February' AND circulation_active_year = 2015 AND total_checkouts >= 100;


/* Find employees in the Sales department who achieved a target greater than 150.
Output first names of employees.
Sort records by the first name in descending order. */
/* employee Table:
id:              int
first_name:      varchar
last_name:       varchar
age:             int
sex:             varchar
employee_title:  varchar
department:      varchar
salary:          int
target:          int
bonus:           int
email:           varchar
city:            varchar
address:         varchar
manager_id:      int */

SELECT first_name 
FROM employee
WHERE department = 'sales' AND target > 150;


/* Compare each employee's salary with the average salary of the corresponding department.
Output the department, first name, and salary of employees along with the average salary of that department. */
/* employee Table:
id:              int
first_name:      varchar
last_name:       varchar
age:             int
sex:             varchar
employee_title:  varchar
department:      varchar
salary:          int
target:          int
bonus:           int
email:           varchar
city:            varchar
address:         varchar
manager_id:      int */

SELECT department, first_name, salary, AVG(salary) OVER (PARTITION BY department) AS average_salary
FROM employee;


/* Find order details made by Jill and Eva.
Consider the Jill and Eva as first names of customers.
Output the order date, details and cost along with the first name.
Order records based on the customer id in ascending order. */
/* customers Table:
id:            int
first_name:    varchar
last_name:     varchar
city:          varchar
address:       varchar
phone_number:  varchar

orders Table:
id:                int
cust_id:           int
order_date:        datetime  
order_details:     varchar
total_order_cost:  int */

SELECT order_date, order_details, total_order_cost, first_name
FROM customers c
JOIN orders o
ON c.id = o.cust_id
WHERE first_name = 'Jill' OR first_name = 'Eva'
ORDER BY cust_id ASC;

/* stratascratch.com Practice Problems II*/

/*Find the most profitable company from the financial sector. Output the result along with the continent.*/
/*forbes_global_2010_2014 Table:
company:        varchar
sector:         varchar
industry:       varchar
continent:      varchar
country:        varchar
marketvalue:    float
sales:          float
profits:        float
assets:         float
rank:           int
forbeswebpage:  varchar */

SELECT company, continent
FROM forbes_global_2010_2014
WHERE sector = 'Financials'
HAVING MAX(profits);


/*Count the number of companies in the Information Technology sector in each country.
Output the result along with the corresponding country name.
Order the result based on the number of companies in the descending order./*
/*forbes_global_2010_2014 Table:
company:        varchar
sector:         varchar
industry:       varchar
continent:      varchar
country:        varchar
marketvalue:    float
sales:          float
profits:        float
assets:         float
rank:           int
forbeswebpage:  varchar */

SELECT country, COUNT(sector) AS num_of_companies
FROM forbes_global_2010_2014
WHERE sector = 'Information Technology'
GROUP BY country
ORDER BY num_of_companies DESC;


/*Find the average profit for major banks.*/
/*forbes_global_2010_2014 Table:
company:        varchar
sector:         varchar
industry:       varchar
continent:      varchar
country:        varchar
marketvalue:    float
sales:          float
profits:        float
assets:         float
rank:           int
forbeswebpage:  varchar */

SELECT AVG(profits) AS average_profit
FROM forbes_global_2010_2014
WHERE industry = "Major Banks";


/* Find the total cost of each customer's orders. Output customer's id, first name, and the total order cost. 
Order records by customer's first name alphabetically.*/
/* customers Table:
id:            int
first_name:    varchar
last_name:     varchar
city:          varchar
address:       varchar
phone_number:  varchar
-------------------------
orders Table:
id:                int
cust_id:           int
order_date:        datetime
order_details:     varchar
total_order_cost:  int */

SELECT customers.id, customers.first_name, SUM(orders.total_order_cost) AS total_cost
FROM customers
JOIN orders
ON customers.id = orders.cust_id
GROUP BY customers.id
ORDER BY customers.first_name ASC;


/* Find the last time each bike was in use. Output both the bike number and the date-timestamp of the bike's last use (i.e., the date-time the bike was returned). 
Order the results by bikes that were most recently used. */
/*dc_bikeshare_q1_2012 Table:
duration:          varchar
duration_seconds:  int
start_time:        datetime
start_station:     varchar
start_terminal:    int
end_time:          datetime
end_station:       varchar
end_terminal:      int
bike_number:       varchar
rider_type:        varchar
id:                int */

SELECT bike_number, MAX(end_time ) AS last_used
FROM dc_bikeshare_q1_2012
GROUP BY bike_number
ORDER BY last_used DESC;


/* Find the gender that has made the most number of doctor appointments.
Output the gender along with the corresponding number of appointments. */
/*medical_appointments Table:
patientid:       float
appointmentid:   int
gender:          varchar
scheduledday:    datetime
appointmentday:  datetime
age:             int
neighbourhood:   varchar
scholarship:     int
hipertension:    int
diabetes:        int
alcoholism:      int
handcap:         int
sms_received:    int
no_show:         varchar */

SELECT gender, COUNT(appointmentid) AS num_of_appointments
FROM medical_appointments
GROUP BY gender
ORDER BY num_of_appointments DESC
LIMIT 1;


/* Find the total number of records that belong to each variety in the dataset. Output the variety along with the corresponding number of records. 
Order records by the variety in ascending order.*/
/*iris Table:
sepal_length:  float
sepal_width:   float
petal_length:  float
petal_width:   float
variety:       varchar */

SELECT variety, COUNT(variety) AS number_of_records
FROM iris
GROUP BY variety;


/*Find the total number of housing units completed for each year. Output the year along with the total number of housings. 
Order the result by year in ascending order.
Note: Number of housing units in thousands. */
/* housing_units_completed_us Table:
year:       int
month:      int
south:      float
west:       float
midwest:    float
northeast:  float */

SELECT year, SUM(south + west + midwest + northeast) AS number_of_units
FROM housing_units_completed_us
GROUP BY year
ORDER BY year ASC;


/* Find the number of rows for each review score earned by 'Hotel Arena'. Output the hotel name (which should be 'Hotel Arena'),
review score along with the corresponding number of rows with that score for the specified hotel.*/
/* hotel_reviews Table:
hotel_address:                               varchar
additional_number_of_scoring:                int
review_date:                                 datetime
average_score:                               float
hotel_name:                                  varchar
reviewer_nationality:                        varchar
negative_review:                             varchar
review_total_negative_word_counts:           int
total_number_of_reviews:                     int
positive_review:                             varchar
review_total_positive_word_counts:           int
total_number_of_reviews_reviewer_has_given:  int
reviewer_score:                              float
tags:                                        varchar
days_since_review:                           varchar
lat:                                         float
lng:                                         float */

SELECT hotel_name, reviewer_score, COUNT(*)
FROM hotel_reviews
WHERE hotel_name = "Hotel Arena"
GROUP BY hotel_name, reviewer_score;


/*Find the total AdWords earnings for each business type. Output the business types along with the total earnings. */
/* google_adwords_earnings Table:
business_type:     varchar
n_employees:       int
year:              int
adwords_earnings:  int */

SELECT business_type, SUM(adwords_earnings)
FROM google_adwords_earnings
GROUP BY business_type;


/* Find the number of acquisitions that occurred in each quarter of each year. 
Output the acquired quarter in YYYY-Qq format along with the number of acquisitions and order results 
by the quarters with the highest number of acquisitions first. */
/* crunchbase_acquisitions Table:
company_permalink:       varchar
company_name:            varchar
company_category_code:   varchar
company_country_code:    varchar
company_state_code:      varchar
company_region:          varchar
company_city:            varchar
acquirer_permalink:      varchar
acquirer_name:           varchar
acquirer_category_code:  varchar
acquirer_country_code:   varchar
acquirer_state_code:     varchar
acquirer_region:         varchar
acquirer_city:           varchar
acquired_at:             datetime
acquired_month:          datetime
acquired_quarter:        datetime
acquired_year:           int
price_amount:            float
price_currency_code:     varchar
id:                      int */

SELECT acquired_quarter,COUNT(id) AS number_of_acquisitions
FROM crunchbase_acquisitions
GROUP BY acquired_quarter
ORDER BY number_of_acquisitions DESC;


/* Rank guests based on their ages.
Output the guest id along with the corresponding rank.
Order records by the age in descending order. */
/* airbnb_guests Table:
guest_id:     int
nationality:  varchar
gender:       varchar
age:          int */

SELECT guest_id, RANK() OVER (ORDER BY age DESC) AS 'rank'
FROM airbnb_guests;

/* stratascratch.com Practice Problems*/

/* Write a query that returns the user ID of all users that have created at least one ‘Refinance’ submission and at least one ‘InSchool’ submission.*/
/* loans Table:
id:          int
user_id:     int
created_at:  datetime
status:      varchar
type:        varchar*/

SELECT user_id 
FROM loans
WHERE type = "Refinance" OR type = "InSchool"
GROUP BY user_id
HAVING COUNT(DISTINCT type) = 2;


/*Return the total number of comments received for each user in the 30 or less days before 2020-02-10. 
Don't output users who haven't received any comment in the defined time period.*/
*/fb_comments_count Table
user_id:             int
created_at:          datetime
number_of_comments:  int*/

SELECT user_id, SUM(number_of_comments) AS total_number_of_comments
FROM fb_comments_count
WHERE created_at BETWEEN DATE_SUB('2020-02-10', INTERVAL 30 DAY) AND '2020-02-10'
GROUP BY user_id;


/*Return a distribution of users activity per day of the month. By distribution we mean the number of posts per day of the month.*/
/*facebook_posts Table
post_id:        int
poster:         int
post_text:      varchar
post_keywords:  varchar
post_date:      datetime*/

SELECT DAY(post_date) AS day, COUNT(post_id) AS acitvity_per_day
FROM facebook_posts
GROUP BY DAY(post_date);


/* Find users who are both a viewer and streamer.*/
/*twitch_sessions Table:
user_id:        int
session_start:  datetime
session_end:    datetime
session_id:     int
session_type:   varchar*/

SELECT user_id 
FROM twitch_sessions
WHERE session_type IN('streamer', 'viewer')
GROUP BY user_id;


/* Write a query that calculates the difference between the highest salaries found in the marketing and engineering departments. 
Output just the absolute difference in salaries.*/
/* db_employee Table:
id:             int
first_name:     varchar
last_name:      varchar
salary:         int
department_id:  int

db_dept Table:
id:          int
department:  varchar */

SELECT 
    ABS(MAX(CASE WHEN department = 'marketing' THEN salary END) -
    MAX(CASE WHEN department = 'engineering' THEN salary END)) AS salary_difference
FROM db_employee
JOIN db_dept
ON db_employee.department_id = db_dept.id;


/* We have a table with employees and their salaries, however, some of the records are old and contain outdated salary information. 
Find the current salary of each employee assuming that salaries increase each year. Output their id, first name, last name, department ID, and current salary. 
Order your list by employee ID in ascending order.*/
/* ms_employee_salary Table:
id:             int
first_name:     varchar
last_name:      varchar
salary:         int
department_id:  int */

SELECT id, first_name, last_name, department_id, MAX(salary) 
FROM ms_employee_salary
GROUP BY id
ORDER BY id ASC;


/* Find all inspections which are part of an inactive program.*/
/*los_angeles_restaurant_health_inspections Table:
serial_number:          varchar
activity_date:          datetime
facility_name:          varchar
score:                  int
grade:                  varchar
service_code:           int
service_description:    varchar
employee_id:            varchar
facility_address:       varchar
facility_city:          varchar
facility_id:            varchar
facility_state:         varchar
facility_zip:           varchar
owner_id:               varchar
owner_name:             varchar
pe_description:         varchar
program_element_pe:     int
program_name:           varchar
program_status:         varchar
record_id:              varchar */

SELECT *
FROM los_angeles_restaurant_health_inspections
WHERE program_status = 'INACTIVE';


/* Find all routine inspections where high-risks issues were found.*/
/*los_angeles_restaurant_health_inspections Table:
serial_number:          varchar
activity_date:          datetime
facility_name:          varchar
score:                  int
grade:                  varchar
service_code:           int
service_description:    varchar
employee_id:            varchar
facility_address:       varchar
facility_city:          varchar
facility_id:            varchar
facility_state:         varchar
facility_zip:           varchar
owner_id:               varchar
owner_name:             varchar
pe_description:         varchar
program_element_pe:     int
program_name:           varchar
program_status:         varchar
record_id:              varchar */

SELECT * 
FROM los_angeles_restaurant_health_inspections
WHERE service_description = 'ROUTINE INSPECTION' AND pe_description LIKE '%HIGH RISK%';


/* Find the mean of inspections scores between 91 and 100.
Assuming that the scores are normally distributed.*/
/*los_angeles_restaurant_health_inspections Table:
serial_number:          varchar
activity_date:          datetime
facility_name:          varchar
score:                  int
grade:                  varchar
service_code:           int
service_description:    varchar
employee_id:            varchar
facility_address:       varchar
facility_city:          varchar
facility_id:            varchar
facility_state:         varchar
facility_zip:           varchar
owner_id:               varchar
owner_name:             varchar
pe_description:         varchar
program_element_pe:     int
program_name:           varchar
program_status:         varchar
record_id:              varchar */

SELECT AVG(score) AS average_inspection_score
FROM los_angeles_restaurant_health_inspections
WHERE score BETWEEN 91 AND 100;


/* Find the average score for grades A, B, and C.
Output the results along with the corresponding grade (ex: 'A', avg(score)).*/
/*los_angeles_restaurant_health_inspections Table:
serial_number:          varchar
activity_date:          datetime
facility_name:          varchar
score:                  int
grade:                  varchar
service_code:           int
service_description:    varchar
employee_id:            varchar
facility_address:       varchar
facility_city:          varchar
facility_id:            varchar
facility_state:         varchar
facility_zip:           varchar
owner_id:               varchar
owner_name:             varchar
pe_description:         varchar
program_element_pe:     int
program_name:           varchar
program_status:         varchar
record_id:              varchar */

SELECT grade, AVG(score) 
FROM los_angeles_restaurant_health_inspections
WHERE grade IN ('A', 'B', 'C')
GROUP BY grade;


/* Find the most common grade earned by bakeries.*/
/*los_angeles_restaurant_health_inspections Table:
serial_number:          varchar
activity_date:          datetime
facility_name:          varchar
score:                  int
grade:                  varchar
service_code:           int
service_description:    varchar
employee_id:            varchar
facility_address:       varchar
facility_city:          varchar
facility_id:            varchar
facility_state:         varchar
facility_zip:           varchar
owner_id:               varchar
owner_name:             varchar
pe_description:         varchar
program_element_pe:     int
program_name:           varchar
program_status:         varchar
record_id:              varchar */

SELECT grade 
FROM los_angeles_restaurant_health_inspections
WHERE facility_name LIKE '%bakery%'
GROUP BY grade
ORDER BY COUNT(grade) DESC
LIMIT 1;


/*Find the number of inspections per day.
Output the result along with the date of the activity.
Order results based on the activity date in the ascending order*/
/*los_angeles_restaurant_health_inspections Table:
serial_number:          varchar
activity_date:          datetime
facility_name:          varchar
score:                  int
grade:                  varchar
service_code:           int
service_description:    varchar
employee_id:            varchar
facility_address:       varchar
facility_city:          varchar
facility_id:            varchar
facility_state:         varchar
facility_zip:           varchar
owner_id:               varchar
owner_name:             varchar
pe_description:         varchar
program_element_pe:     int
program_name:           varchar
program_status:         varchar
record_id:              varchar */

SELECT activity_date, COUNT(*) AS number_of_inspections_per_day
FROM los_angeles_restaurant_health_inspections
GROUP BY activity_date
ORDER BY activity_date ASC;


/* Order all countries by the year they first participated in the Olympics.
Output the National Olympics Committee (NOC) name along with the desired year.
Sort records by the year and the NOC in ascending order. */
/*olympics_athletes_events Table:
id:        int
name:      varchar
sex:       varchar
age:       float
height:    float
weight:    datetime
team:      varchar
noc:       varchar
games:     varchar
year:      int
season:    varchar
city:      varchar
sport:     varchar
event:     varchar
medal:     varchar */

SELECT noc, MIN(year) AS first_year
FROM olympics_athletes_events
GROUP BY noc
ORDER BY first_year;


/* Find quarterbacks with the most interceptions in 2016. Output the quarterbacks along with the corresponding number of interceptions. 
Sort records by the interceptions in descending order.*/
/*qbstats_2015_2016 Table:
qb:             varchar
att:            int
cmp:            int
yds:            int
ypa:            float
td:             int
int:            int
lg:             varchar
sack:           int
loss:           int
rate:           float
game_points:    int
home_away:      varchar
year:           int */

SELECT qb, SUM(`int`) AS number_of_interceptions /*int is a reserved key word `` is used*/
FROM qbstats_2015_2016
WHERE year = 2016
GROUP BY qb
ORDER BY number_of_interceptions DESC;


/*Find the top 10 ratings quarterbacks received. Output the quarterback along with the corresponding rating.*/
/*qbstats_2015_2016 Table:
qb:             varchar
att:            int
cmp:            int
yds:            int
ypa:            float
td:             int
int:            int
lg:             varchar
sack:           int
loss:           int
rate:           float
game_points:    int
home_away:      varchar
year:           int */

SELECT qb, rate
FROM qbstats_2015_2016
ORDER BY rate DESC
LIMIT 10;


/* Find the top 10 quarterbacks with the highest points in one game in 2016.
Output the quarterback along with the corresponding game points.
Order records based on game points in descending order and just output the top 10 rows 
without considering any ties in game points that would result in more than 10 qbs in the output.*/
/*qbstats_2015_2016 Table:
qb:             varchar
att:            int
cmp:            int
yds:            int
ypa:            float
td:             int
int:            int
lg:             varchar
sack:           int
loss:           int
rate:           float
game_points:    int
home_away:      varchar
year:           int */

SELECT qb, game_points
FROM qbstats_2015_2016
WHERE year = 2016
ORDER BY game_points DESC, qb
LIMIT 10;


/*Find the lowest, average, and the highest ages of athletes across all Olympics. 
HINT: If athlete participated in more than one discipline at one Olympic games, consider it as a separate athlete, no need to remove such edge cases.*/
/*olympics_athletes_events Table:
id:        int
name:      varchar
sex:       varchar
age:       float
height:    float
weight:    datetime
team:      varchar
noc:       varchar
games:     varchar
year:      int
season:    varchar
city:      varchar
sport:     varchar
event:     varchar
medal:    varchar */

SELECT MIN(age) AS lowest_age, AVG(age) AS average_age, MAX(age) AS highest_age
FROM olympics_athletes_events;
